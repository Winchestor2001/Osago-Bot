import datetime
import sys

import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import Message, BotCommand, InputMediaPhoto
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext

import asyncio

from config import bot_token, from_links, osago_data_list, bot_admins, dk_data_list, med_auto_data_list, \
    kasko_bank_data_list
from models import MainDB
from keyboards import menu, user_from_btn, buy_osago_btn, cencel_btn, remove, pay_btn, send_order_btn, \
    service_products_btn, user_profile_btn, history_back_btn, buy_Dk, med_auto_btn, kasko_bank_btn, karta_gibdd_btn, \
    karta_vu_gai_btn, poisk_solariy_btn, admin_panel_btn, change_service_products_btn

from pyqiwip2p import QiwiP2P



logging.basicConfig(level=logging.INFO)
storage = MemoryStorage()
bot = Bot(token=bot_token, parse_mode='html')
dp = Dispatcher(bot, storage=storage)
db = MainDB()
db.createTable()
product_row = []




class MyStates(StatesGroup):
    osago_data = State()
    depozit = State()
    dk_data = State()
    dk_photo_1 = State()
    dk_photo_2 = State()
    dk_photo_3 = State()
    dk_photo_4 = State()
    med_auto = State()
    kasko_bank = State()
    karta_gibdd = State()
    karta_vu_gai = State()
    poisk_solariy = State()
    sending_to_users = State()
    default_text_handler = State()
    update_qiwi_data = State()
    update_product_price = State()




@dp.callback_query_handler(lambda c: True)
async def queryCallBackFunc(c):
    user_id = c.from_user.id
    msg = c.message.chat.id
    cd = c.data
    back_btn = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")
    if cd in from_links:
        db.addUser(user_id, cd)

        await bot.answer_callback_query(c.id)
        await bot.delete_message(msg, c.message.message_id)
        await bot.send_message(msg, f"<b>üôã‚Äç‚ôÄÔ∏è–ü—Ä–∏–≤–µ—Ç –¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥!</b>\n"
                                        f"<b>–ú–µ–Ω—è –∑–æ–≤—É—Ç –û—Å–∞–≥–æ –ú–∞–∫—Å</b>\n\n"
                                        f"–Ø –±—ã–ª —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –æ—Å–∞–≥–æ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç—ã  –Ω–∞ —Ç–≤–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å.\n\n"
                                        f"<em>–û–±–µ—â–∞—é –Ω–µ –∑–∞–Ω–∏–º–∞—Ç—å —É —Ç–µ–±—è –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, <b>–≤—Ä–µ–º—è</b> = <b>–¥–µ–Ω—å–≥–∏</b>, –ø–æ—ç—Ç–æ–º—É –≤—Å–µ –±—É–¥–µ—Ç –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ, –±—ã—Å—Ç—Ä–æ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–Ω—è—Ç–Ω–æ.</em>\n\n"
                                        f"‚è≥–ó–∞–∫–∞–∑—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è: <b>—Å 09:00 –¥–æ 22:00 –ø–æ –ú–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏, –∞ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è 24/7</b>\n\n"
                                        f"–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é –∏ —è —Å —Ä–∞–¥–æ—Å—Ç—å—é —Ç–µ–±–µ –ø–æ–º–æ–≥—Éüòå", reply_markup=menu)


    elif cd == 'back':
        await bot.answer_callback_query(c.id)
        await bot.edit_message_text(
            chat_id=msg,
            message_id=c.message.message_id,
            text=f"üåê –ù–∞—à–∏ —É—Å–ª—É–≥–∏",
            reply_markup=service_products_btn
        )


    elif cd == 'back_to_admin_panel':
        qiwi_data = db.getQiwiConfig()
        await bot.answer_callback_query(c.id)
        text = f"<b>üë§ –ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å:</b>\n\n" \
               f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b> <em>{db.getBotUsers()[0]}</em> —á–µ–ª–æ–≤–µ–∫\n" \
               f"<b>Qiwi –ù–æ–º–µ—Ä:</b> <code>{qiwi_data[0]}</code>\n" \
               f"<b>Qiwi –¢–æ–∫–µ–Ω:</b> <code>{qiwi_data[1]}</code>"
        await bot.edit_message_text(
            chat_id=msg,
            message_id=c.message.message_id,
            text=text,
            reply_markup=admin_panel_btn
        )


    elif cd == 'back_to_profile':
        await bot.answer_callback_query(c.id)
        user_info = db.getUserInfo(user_id)
        text = f"üÜî ID: {user_id}\n" \
               f"üí∞ –ë–∞–ª–∞–Ω—Å: {user_info[1]} —Ä—É–±."
        await bot.edit_message_text(
            chat_id=user_id,
            message_id=c.message.message_id,
            text=f"üë§ –í–∞—à –ü—Ä–æ—Ñ–∏–ª—å\n\n{text}",
            reply_markup=user_profile_btn)


    elif cd == 'myHistory':
        try:
            userHistory = db.getUserHistory(user_id)
            if userHistory != []:
                history = ''
                for his in userHistory:
                    ord = his[1]
                    pri = his[2]
                    dat = his[3]
                    tot = f"<b>{ord}</b> - <code>{pri}</code> - {dat}\n"
                    history += tot
                await bot.edit_message_text(
                    chat_id=c.message.chat.id,
                    message_id=c.message.message_id,
                    text=f"üß∞ –í–∞—à—ã –∑–∞–∫–∞–∑–∞:\n\n{history}",
                    reply_markup=history_back_btn
                )
            else:
                await bot.answer_callback_query(c.id, "üò¶–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫!", show_alert=True)


        except Exception as ex:
            await bot.answer_callback_query(c.id, "üò¶–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫!", show_alert=True)


    elif cd == 'clear_history':
        db.clearHistory(user_id)
        await bot.answer_callback_query(c.id, '–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞!', show_alert=True)
        user_info = db.getUserInfo(user_id)
        text = f"üÜî ID: {user_id}\n" \
               f"üí∞ –ë–∞–ª–∞–Ω—Å: {user_info[1]} —Ä—É–±."
        await bot.edit_message_text(
            chat_id=user_id,
            message_id=c.message.message_id,
            text=f"üë§ –í–∞—à –ü—Ä–æ—Ñ–∏–ª—å\n\n{text}",
            reply_markup=user_profile_btn)


    elif cd == 'depozit':
        await bot.answer_callback_query(c.id)
        await MyStates.depozit.set()
        await bot.send_message(user_id, f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É <em>(–º–∏–Ω–∏–º—É–º 100 —Ä—É–±.)</em>:", reply_markup=cencel_btn)


    elif cd == "check_pay":
        p2p = QiwiP2P(auth_key=db.getQiwiConfig()[1])
        bill_id = db.checkPayment(user_id)
        user_info = db.getUserInfo(user_id)

        if p2p.check(bill_id).status == "PAID":
            await bot.edit_message_text(
                chat_id=user_id,
                message_id=c.message.message_id,
                text=f"‚úÖ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ —Å—É–º–º—É: {user_info[3]}‚ÇΩ")

            db.updateUserBalance(user_id, item='user_balance', value=f'user_balance+{user_info[3]}')

        elif p2p.check(bill_id).status == "WAITING":
            await bot.answer_callback_query(c.id, f"‚ö†Ô∏è –í—ã –µ—â–µ –Ω–µ –ø–µ—Ä–µ–≤–µ–ª–∏ {user_info[3]} —Ä—É–±.", show_alert=True)


        elif p2p.check(bill_id).status == "EXPIRED":
            await bot.answer_callback_query(c.id, f"üóë –°—Å—ã–ª–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω", show_alert=True)
            await bot.delete_message(c.message.chat.id, c.message.message_id)



    elif cd == 'osago_data_send_to_admin':
        user_info = db.getUserInfo(user_id)
        order_info = db.getAllUserOrderProduct(user_id, user_info[6])
        db.updateUserHistory(user_id, user_info[4], user_info[5])
        db.updateUserInfo(user_id, 'user_balance', round(int(user_info[1]) - int(user_info[5]), 2))
        db_admins = db.getAdminsId()
        all_admins = []
        if not db_admins is None:
            for adm in bot_admins:
                all_admins.append(adm)
            for adm in db_admins:
                all_admins.append(adm[0])
        else:
            for adm in bot_admins:
                all_admins.append(adm)

        userLink = f"<a href='tg://user?id={order_info[0]}'>USER</a>"

        sending_text = f"<b>‚îú –§–ò–û –°–¢–†–ê–•–û–í–ê–¢–ï–õ–Ø:</b> <em>{order_info[1]}</em>\n" \
                        f"<b>‚îú –§–ò–û –°–û–ë–°–¢–í–ï–ù–ù–ò–ö–ê:</b> <em>{order_info[2]}</em>\n" \
                        f"<b>‚îú –ú–ê–†–ö–ê/–ú–û–î–ï–õ–¨ –ê–í–¢–û:</b> <em>{order_info[3]}</em>\n" \
                        f"<b>‚îú VIN –ù–û–ú–ï–†/–†–ê–ú–ê/–ö–£–ó–û–í:</b> <em>{order_info[4]}</em>\n" \
                        f"<b>‚îú –ù–û–ú–ï–† –ü–¢–°:</b> <em>{order_info[5]}</em>\n" \
                        f"<b>‚îú –ù–û–ú–ï–† –ê–í–¢–û:</b> <em>{order_info[6]}</em>\n" \
                        f"<b>‚îú –ü–ê–°–ü–û–†–¢ –î–ê–ù–ù–´–ï:</b> <em>{order_info[7]}</em>\n\n" \
                        f"<b>ID:</b> <code>{user_id}</code>\n" \
                        f"<b>–¢–ê–†–ò–§:</b> <em>{user_info[4]}</em>\n\n" \
                        f"–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞, –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å caption ID"

        await bot.delete_message(user_id, c.message.message_id)
        await bot.send_message(user_id, f'‚úÖ <em>–°–∫–æ—Ä–æ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –≤–∞—à –∑–∞–∫–∞–∑!</em>', reply_markup=menu)
        try:
            for sending in all_admins:
                await bot.send_message(sending, f"{userLink}\n\n"
                                                f"{sending_text}")
                await asyncio.sleep(0.03)
        except Exception as ex:
            print(ex)


    elif cd == 'dk_data_send_to_admin':
        user_info = db.getUserInfo(user_id)
        order_info = db.getAllUserOrderProduct(user_id, user_info[6])
        db.updateUserHistory(user_id, user_info[4], user_info[5])
        db.updateUserInfo(user_id, 'user_balance', round(int(user_info[1]) - int(user_info[5]), 2))
        db_admins = db.getAdminsId()
        all_admins = []
        if not db_admins is None:
            for adm in bot_admins:
                all_admins.append(adm)
            for adm in db_admins:
                all_admins.append(adm[0])
        else:
            for adm in bot_admins:
                all_admins.append(adm)

        userLink = f"<a href='tg://user?id={order_info[0]}'>USER</a>"

        await bot.delete_message(user_id, c.message.message_id)
        for i in range(1, 5):
            await bot.delete_message(user_id, c.message.message_id - i)
        await bot.send_message(user_id, f'‚úÖ <em>–°–∫–æ—Ä–æ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –≤–∞—à –∑–∞–∫–∞–∑!</em>', reply_markup=menu)
        try:
            for sending in all_admins:
                pics = db.getDkData(user_id)
                text = f"{userLink}\n\n"\
                       f"‚îú<b>–§–ò–û:</b> <em>{pics[1]}</em>\n" \
                       f'‚îú–ü—Ä–∏–º–µ—Ä–Ω—ã–π –ø—Ä–æ–±–µ–≥: <em>{pics[2]}</em>\n' \
                       f'‚îú–ú–∞—Ä–∫–∞ —à–∏–Ω: <em>{pics[3]}</em>\n' \
                       f'‚îú–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞: <em>{pics[4]}</em>\n\n' \
                       f"<b>ID:</b> <code>{user_id}</code>\n" \
                       f"<b>–¢–ê–†–ò–§:</b> <em>{user_info[4]}</em>\n\n" \
                       f"–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞, –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å caption ID"
                media_group = [InputMediaPhoto(pics[5], caption=text, parse_mode='html'), InputMediaPhoto(pics[6]),
                               InputMediaPhoto(pics[7]), InputMediaPhoto(pics[8])]
                await bot.send_media_group(sending, media_group)
                await asyncio.sleep(0.03)
        except Exception as ex:
            print(ex)


    elif cd == 'med_auto_send_to_admin':
        user_info = db.getUserInfo(user_id)
        order_info = db.getAllUserOrderProduct(user_id, user_info[6])
        db.updateUserHistory(user_id, user_info[4], user_info[5])
        db.updateUserInfo(user_id, 'user_balance', round(int(user_info[1]) - int(user_info[5]), 2))
        db_admins = db.getAdminsId()
        all_admins = []
        if not db_admins is None:
            for adm in bot_admins:
                all_admins.append(adm)
            for adm in db_admins:
                all_admins.append(adm[0])
        else:
            for adm in bot_admins:
                all_admins.append(adm)

        userLink = f"<a href='tg://user?id={order_info[0]}'>USER</a>"

        sending_text = f"<b>‚îú –§–ò–û:</b> <em>{order_info[1]}</em>\n" \
                           f"<b>‚îú –î–∞—Ç–∞ —Ä–æ–∂-–Ω–∏—è:</b> <em>{order_info[2]}</em>\n" \
                           f"<b>‚îú –°–µ—Ä–∏—è –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞:</b> <em>{order_info[3]}</em>\n" \
                           f"<b>‚îú –ö–µ–º –∫–æ–≥–¥–∞ –≤—ã–¥–∞–Ω:</b> <em>{order_info[4]}</em>\n" \
                           f"<b>‚îú –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–∞–≤ (B, C, D):</b> <em>{order_info[5]}</em>\n" \
                           f"<b>ID:</b> <code>{user_id}</code>\n" \
                           f"<b>–¢–ê–†–ò–§:</b> <em>{user_info[4]}</em>\n\n" \
                           f"–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞, –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å caption ID"

        await bot.delete_message(user_id, c.message.message_id)
        await bot.send_message(user_id, f'‚úÖ <em>–°–∫–æ—Ä–æ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –≤–∞—à –∑–∞–∫–∞–∑!</em>', reply_markup=menu)
        try:
            for sending in all_admins:
                await bot.send_message(sending, f"{userLink}\n\n"
                                                    f"{sending_text}")
                await asyncio.sleep(0.03)
        except Exception as ex:
            print(ex)


    elif cd == 'kasko_bank_send_to_admin':
        user_info = db.getUserInfo(user_id)
        order_info = db.getAllUserOrderProduct(user_id, user_info[6])
        db.updateUserHistory(user_id, user_info[4], user_info[5])
        db.updateUserInfo(user_id, 'user_balance', round(int(user_info[1]) - int(user_info[5]), 2))
        db_admins = db.getAdminsId()
        all_admins = []
        if not db_admins is None:
            for adm in bot_admins:
                all_admins.append(adm)
            for adm in db_admins:
                all_admins.append(adm[0])
        else:
            for adm in bot_admins:
                all_admins.append(adm)

        userLink = f"<a href='tg://user?id={order_info[0]}'>USER</a>"

        sending_text = f"<b>‚îú–§–ò–û:</b> {order_info[1]}\n" \
                           f"<b>‚îú–î–ê–¢–ê –†–û–ñ–î–ï–ù–ò–Ø:</b> {order_info[2]}\n" \
                           f"<b>‚îú–í–£:</b> {order_info[3]}\n" \
                           f"<b>‚îú–°–¢–ê–ñ –í–û–ñ–î–ï–ù–ò–ï:</b> {order_info[4]}\n" \
                           f"<b>‚îú–¢–° –î–ê–ù–ù–´–ï:</b> {order_info[5]}\n" \
                           f'<b>‚îú–ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï –ë–ê–ù–ö–ê:</b> {order_info[6]}\n' \
                           f'<b>‚îú–î–ï–ô–°–¢–í–ò–¢–ï–õ–¨–ù–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨ –ê–í–¢–û–ú–û–ë–ò–õ–Ø:</b> {order_info[7]}\n' \
                           f'<b>‚îú–¢–ï–õ–ï–§–û–ù –ù–û–ú–ï–†:</b> {order_info[8]}\n\n' \
                           f"<b>ID:</b> <code>{user_id}</code>\n" \
                           f"<b>–¢–ê–†–ò–§:</b> <em>{user_info[4]}</em>\n\n" \
                           f"–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞, –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å caption ID"

        await bot.delete_message(user_id, c.message.message_id)
        await bot.send_message(user_id, f'‚úÖ <em>–°–∫–æ—Ä–æ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –≤–∞—à –∑–∞–∫–∞–∑!</em>', reply_markup=menu)
        try:
            for sending in all_admins:
                await bot.send_message(sending, f"{userLink}\n\n"
                                                f"{sending_text}")
                await asyncio.sleep(0.03)
        except Exception as ex:
            print(ex)


    elif cd == 'karta_gibdd_send_to_admin':
        user_info = db.getUserInfo(user_id)
        order_info = db.getAllUserOrderProduct(user_id, user_info[6])
        db.updateUserHistory(user_id, user_info[4], user_info[5])
        db.updateUserInfo(user_id, 'user_balance', round(int(user_info[1]) - int(user_info[5]), 2))
        db_admins = db.getAdminsId()
        all_admins = []
        if not db_admins is None:
            for adm in bot_admins:
                all_admins.append(adm)
            for adm in db_admins:
                all_admins.append(adm[0])
        else:
            for adm in bot_admins:
                all_admins.append(adm)

        userLink = f"<a href='tg://user?id={order_info[0]}'>USER</a>"

        sending_text = f"<b>‚îú–ì–æ—Å.–ù–æ–º–µ—Ä:</b> {order_info[1]}\n" \
                           f"<b>ID:</b> <code>{user_id}</code>\n" \
                           f"<b>–¢–ê–†–ò–§:</b> <em>{user_info[4]}</em>\n\n" \
                           f"–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞, –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å caption ID"

        await bot.delete_message(user_id, c.message.message_id)
        await bot.send_message(user_id, f'‚úÖ <em>–°–∫–æ—Ä–æ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –≤–∞—à –∑–∞–∫–∞–∑!</em>', reply_markup=menu)
        try:
            for sending in all_admins:
                await bot.send_message(sending, f"{userLink}\n\n"
                                                    f"{sending_text}")
                await asyncio.sleep(0.03)
        except Exception as ex:
            print(ex)


    elif cd == 'karta_vu_gai_send_to_admin':
        user_info = db.getUserInfo(user_id)
        order_info = db.getAllUserOrderProduct(user_id, user_info[6])
        db.updateUserHistory(user_id, user_info[4], user_info[5])
        db.updateUserInfo(user_id, 'user_balance', round(int(user_info[1]) - int(user_info[5]), 2))
        db_admins = db.getAdminsId()
        all_admins = []
        if not db_admins is None:
            for adm in bot_admins:
                all_admins.append(adm)
            for adm in db_admins:
                all_admins.append(adm[0])
        else:
            for adm in bot_admins:
                all_admins.append(adm)

        userLink = f"<a href='tg://user?id={order_info[0]}'>USER</a>"

        sending_text = f"<b>ID:</b> <code>{user_id}</code>\n" \
                           f"<b>–¢–ê–†–ò–§:</b> <em>{user_info[4]}</em>\n\n" \
                           f"–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞, –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å caption ID"

        await bot.delete_message(user_id, c.message.message_id)
        await bot.send_message(user_id, f'‚úÖ <em>–°–∫–æ—Ä–æ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –≤–∞—à –∑–∞–∫–∞–∑!</em>', reply_markup=menu)
        try:
            for sending in all_admins:
                await bot.send_photo(sending, order_info[1], caption=f"{userLink}\n\n"
                                                    f"{sending_text}")
                await asyncio.sleep(0.03)
        except Exception as ex:
            print(ex)


    elif cd == 'poisk_solariy_send_to_admin':
        user_info = db.getUserInfo(user_id)
        order_info = db.getAllUserOrderProduct(user_id, user_info[6])
        db.updateUserHistory(user_id, user_info[4], user_info[5])
        db.updateUserInfo(user_id, 'user_balance', round(int(user_info[1]) - int(user_info[5]), 2))
        db_admins = db.getAdminsId()
        all_admins = []
        if not db_admins is None:
            for adm in bot_admins:
                all_admins.append(adm)
            for adm in db_admins:
                all_admins.append(adm[0])
        else:
            for adm in bot_admins:
                all_admins.append(adm)

        userLink = f"<a href='tg://user?id={order_info[0]}'>USER</a>"

        sending_text = f"<b>‚îú–§–ò–û:</b> {order_info[1]}\n" \
                           f"<b>‚îú–î–ê–¢–ê –†–û–ñ–î–ï–ù–ò–Ø:</b> {order_info[2]}\n\n" \
                           f"<b>ID:</b> <code>{user_id}</code>\n" \
                           f"<b>–¢–ê–†–ò–§:</b> <em>{user_info[4]}</em>\n\n" \
                           f"–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞, –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å caption ID"

        await bot.delete_message(user_id, c.message.message_id)
        await bot.send_message(user_id, f'‚úÖ <em>–°–∫–æ—Ä–æ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –≤–∞—à –∑–∞–∫–∞–∑!</em>', reply_markup=menu)
        try:
            for sending in all_admins:
                await bot.send_message(sending, f"{userLink}\n\n"
                                                    f"{sending_text}")
                await asyncio.sleep(0.03)
        except Exception as ex:
            print(ex)




# 1 category
    elif cd == "buy_osago":
        await bot.answer_callback_query(c.id)

        await bot.edit_message_text(
            chat_id=msg,
            message_id=c.message.message_id,
            text=f"<b>üìë–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –ø–æ–ª–∏—Å –û–°–ê–ì–û —Å –∑–∞–Ω–µ—Å–µ–Ω–∏–µ–º –≤–∞—à–µ–≥–æ VIN –≤ –±–∞–∑—É –†–°–ê.</b>\n\n"
                 f"<b>–û—Ñ–æ—Ä–º–∏–º –û–°–ê–ì–û –¥–ª—è –õ–Æ–ë–û–ì–û –£–ß–ï–¢–ê.</b>\n"
                 f"<em>–ë–µ–ª–∞—Ä—É—Å—å üáßüáæ –ê—Ä–º–µ–Ω–∏—è üá¶üá≤ –†–æ—Å—Å–∏—è üá∑üá∫  –∏ —Ç–¥.</em>\n\n"
                 f"<b>–ù–∞ –ª—é–±–æ–π –≤–∏–¥ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:</b>\n"
                 f"<em>–ú–æ—Ç–æ—Ü–∏–∫–ª üèç –ê–≤—Ç–æ–º–æ–±–∏–ª—å üöô</em>\n"
                 f"<em>–¢—Ä–∞–∫—Ç–æ—Ä üöú  –ê–≤—Ç–æ —Å –ø—Ä–∏—Ü–µ–ø–æ–º üöó</em>\n"
                 f"<em>–ì—Ä—É–∑–æ–≤–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å üöõ</em>\n"
                 f"<em>–ê —Ç–∞–∫ –∂–µ —Ç–∞–∫—Å–∏ üöï</em>\n\n"
                 f"<b>‚ùóÔ∏è–í—Å–µ –ï-–û–°–ê–ì–û –±–µ–∑ –≤—ã–ø–ª–∞—ÇÔ∏è –ø—Ä–∏ –î–¢–ü</b>\n\n"
                 f"<em>‚è≥–°—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –æ—Ç 30 –º–∏–Ω –¥–æ 2—Ö —á–∞—Å–æ–≤ –ø—Ä–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ –†–°–ê, –≤–æ–∑–º–æ–∂–Ω—ã –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–±–æ—Ç—ã –±–∞–∑ –ï–ê–ò–°–¢–û –∏ –†–°–ê</em>\n\n"
                 f"<em>–°–≤–æ–π –∑–∞–∫–∞–∑ –í—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä—è–º–æ –≤ –±–æ—Ç–µ. –ú—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –∏ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤</em>\n\n"
                 f"<em>üéÅ–í –∫–∞—á–µ—Å—Ç–≤–µ –±–æ–Ω—É—Å–∞, –∞–±—Å–æ–ª—é—Ç–Ω–æ –≤—Å–µ –ø–æ–ª–∏—Å—ã –≤ –±–ª–∞–Ω–∫–µ –±—É–¥—É—Ç –ë–ï–ó –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô –ù–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –¢–°</em>",
            reply_markup=buy_osago_btn)


    elif cd == "buy_osago_year":
        product_info = db.getProductsInfo(rowid=1)
        user_info = db.getUserInfo(user_id)
        # print(user_info[1], product_info[1])
        if int(user_info[1]) >= int(product_info[1]):
            await MyStates.osago_data.set()
            db.updateOsagoData(user_id, item='price', value=product_info[1])
            db.updateUserInfo(user_id, 'now_product', product_info[0])
            db.updateUserInfo(user_id, 'now_price', product_info[1])

            await bot.answer_callback_query(c.id)
            await bot.delete_message(msg, c.message.message_id)
            await bot.send_message(
                chat_id=msg,
                text=f'<b>–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ</b> "–û—Ç–º–µ–Ω–∏—Ç—å"\n\n'
                     f'‚îú–§–ò–û –°–¢–†–ê–•–û–í–ê–¢–ï–õ–Ø\n'
                     f'‚îú–§–ò–û –°–û–ë–°–¢–í–ï–ù–ù–ò–ö–ê\n'
                     f'‚îú–ú–ê–†–ö–ê/–ú–û–î–ï–õ–¨ –ê–í–¢–û\n'
                     f'‚îúVIN –ù–û–ú–ï–†/–†–ê–ú–ê/–ö–£–ó–û–í\n'
                     f'‚îú–ù–û–ú–ï–† –ü–¢–°\n'
                     f'‚îú–ù–û–ú–ï–† –ê–í–¢–û\n'
                     f'‚îú–ü–ê–°–ü–û–†–¢ –î–ê–ù–ù–´–ï\n\n'
                     f'<b>‚ùóÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–∫–æ–º –ø–æ—Ä—è–¥–∫–µ</b>:\n'
                     f'<em>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á\n'
                     f'–ò–≤–∞–Ω–æ–≤ –Æ—Ä–∏–π –ò–≤–∞–Ω–æ–≤–∏—á\n'
                     f'–ì–ê–ó 33021\n'
                     f'XT–ï222210Y1766420 331210Y1776033 330530Y0051022\n'
                     f'71 MT 122911\n'
                     f'–ö777–†–í77\n'
                     f'–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á\n'
                     f'10.02.1999\n'
                     f'15.02.2019\n'
                     f'36 18 619487</em>',
                reply_markup=cencel_btn
            )

        else:
            await bot.answer_callback_query(c.id, '‚ùóÔ∏è –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', show_alert=True)


    elif cd == "buy_osago_month":
        user_info = db.getUserInfo(user_id)
        product_info = db.getProductsInfo(rowid=2)

        if int(user_info[1]) >= int(product_info[1]):
            await MyStates.osago_data.set()
            db.updateOsagoData(user_id, item='price', value=product_info[1])
            db.updateUserInfo(user_id, 'now_product', product_info[0])
            db.updateUserInfo(user_id, 'now_price', product_info[1])

            await bot.answer_callback_query(c.id)
            await bot.delete_message(msg, c.message.message_id)
            await bot.send_message(
                chat_id=msg,
                text=f'<b>–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ</b> "–û—Ç–º–µ–Ω–∏—Ç—å"\n\n'
                     f'‚îú–§–ò–û –°–¢–†–ê–•–û–í–ê–¢–ï–õ–Ø\n'
                     f'‚îú–§–ò–û –°–û–ë–°–¢–í–ï–ù–ù–ò–ö–ê\n'
                     f'‚îú–ú–ê–†–ö–ê/–ú–û–î–ï–õ–¨ –ê–í–¢–û\n'
                     f'‚îúVIN –ù–û–ú–ï–†/–†–ê–ú–ê/–ö–£–ó–û–í\n'
                     f'‚îú–ù–û–ú–ï–† –ü–¢–°\n'
                     f'‚îú–ù–û–ú–ï–† –ê–í–¢–û\n'
                     f'‚îú–ü–ê–°–ü–û–†–¢ –î–ê–ù–ù–´–ï\n\n'
                    f'<b>‚ùóÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–∫–æ–º –ø–æ—Ä—è–¥–∫–µ</b>:\n'
                     f'<em>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á\n'
                     f'–ò–≤–∞–Ω–æ–≤ –Æ—Ä–∏–π –ò–≤–∞–Ω–æ–≤–∏—á\n'
                     f'–ì–ê–ó 33021\n'
                     f'XT–ï222210Y1766420 331210Y1776033 330530Y0051022\n'
                     f'71 MT 122911\n'
                     f'–ö777–†–í77\n'
                     f'–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á\n'
                     f'10.02.1999\n'
                     f'15.02.2019\n'
                     f'36 18 619487</em>',
                reply_markup=cencel_btn
            )

        else:
            await bot.answer_callback_query(c.id, '‚ùóÔ∏è –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', show_alert=True)


    elif cd == "buy_osago_nodb":
        user_info = db.getUserInfo(user_id)
        product_info = db.getProductsInfo(rowid=3)

        if int(user_info[1]) >= int(product_info[1]):
            await MyStates.osago_data.set()
            db.updateOsagoData(user_id, item='price', value=product_info[1])
            db.updateUserInfo(user_id, 'now_product', product_info[0])
            db.updateUserInfo(user_id, 'now_price', product_info[1])

            await bot.answer_callback_query(c.id)
            await bot.delete_message(msg, c.message.message_id)
            await bot.send_message(
                chat_id=msg,
                text=f'<b>–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ</b> "–û—Ç–º–µ–Ω–∏—Ç—å"\n\n'
                     f'‚îú–§–ò–û –°–¢–†–ê–•–û–í–ê–¢–ï–õ–Ø\n'
                     f'‚îú–§–ò–û –°–û–ë–°–¢–í–ï–ù–ù–ò–ö–ê\n'
                     f'‚îú–ú–ê–†–ö–ê/–ú–û–î–ï–õ–¨ –ê–í–¢–û\n'
                     f'‚îúVIN –ù–û–ú–ï–†/–†–ê–ú–ê/–ö–£–ó–û–í\n'
                     f'‚îú–ù–û–ú–ï–† –ü–¢–°\n'
                     f'‚îú–ù–û–ú–ï–† –ê–í–¢–û\n'
                     f'‚îú–ü–ê–°–ü–û–†–¢ –î–ê–ù–ù–´–ï\n\n'
                     f'<b>‚ùóÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–∫–æ–º –ø–æ—Ä—è–¥–∫–µ</b>:\n'
                     f'<em>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á\n'
                     f'–ò–≤–∞–Ω–æ–≤ –Æ—Ä–∏–π –ò–≤–∞–Ω–æ–≤–∏—á\n'
                     f'–ì–ê–ó 33021\n'
                     f'XT–ï222210Y1766420 331210Y1776033 330530Y0051022\n'
                     f'71 MT 122911\n'
                     f'–ö777–†–í77\n'
                     f'–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á\n'
                     f'10.02.1999\n'
                     f'15.02.2019\n'
                     f'36 18 619487</em>',
                reply_markup=cencel_btn
            )

        else:
            await bot.answer_callback_query(c.id, '‚ùóÔ∏è –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', show_alert=True)

# 2 category
    elif cd == 'buy_dk':
        await bot.answer_callback_query(c.id)
        buy_Dk.inline_keyboard.clear()
        bd2 = types.InlineKeyboardButton(f"–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞ –±–µ–∑ –±–∞–∑—ã 1 –ì–û–î | {db.getProductsInfo(rowid=5)[1]} RUB",
                                         callback_data="buy_texosmotr_no_db")
        bd3 = types.InlineKeyboardButton(f"–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞ B | {db.getProductsInfo(rowid=6)[1]} RUB",
                                         callback_data="buy_texosmotr_b")
        bd4 = types.InlineKeyboardButton(f"–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞ C | {db.getProductsInfo(rowid=7)[1]} RUB",
                                         callback_data="buy_texosmotr_c")
        buy_Dk.add(bd2, bd3, bd4, back_btn)
        await bot.edit_message_text(
            chat_id=msg,
            message_id=c.message.message_id,
            text=f"<b>üìë–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞ –Ω–∞ –ª—é–±–æ–µ –∞–≤—Ç–æ. –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¢–µ—Ö–æ—Å–º–æ—Ç—Ä –¥–ª—è –Æ–†, –§–ò–ó –ª–∏—Ü –∏ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö –≥—Ä–∞–∂–¥–∞–Ω.</b>\n\n"
                 f"<b>–õ—é–±–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∞–≤—Ç–æ (A, B, C, D, –ü–†–ò–¶–ï–ü)</b>\n"
                 f"<em>üöñ–¢–∞–∫—Å–∏</em>\n"
                 f"<em>üöò–£—á–µ–±–Ω–∞—è –º–∞—à–∏–Ω–∞</em>\n"
                 f"<em>‚ö†Ô∏è–û–ø–∞—Å–Ω—ã–µ –≥—Ä—É–∑—ã</em>\n\n\n"
                 f"<code>‚è≥–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –¥–æ 1 —á–∞—Å–∞.</code>",
            reply_markup=buy_Dk
        )


    # elif cd == 'buy_texosmotr':
    #     product_info = db.getProductsInfo(rowid=4)
    #     user_info = db.getUserInfo(user_id)
    #
    #     if int(user_info[1]) >= int(product_info[1]):
    #         db.updateDkData(user_id, item='price', value=product_info[1])
    #         db.updateUserInfo(user_id, 'now_product', product_info[0])
    #         db.updateUserInfo(user_id, 'now_price', product_info[1])
    #
    #         await MyStates.dk_data.set()
    #         await bot.answer_callback_query(c.id)
    #         await bot.delete_message(user_id, c.message.message_id)
    #         await bot.send_message(
    #             chat_id=user_id,
    #             text=f'<b>–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ</b> "–û—Ç–º–µ–Ω–∏—Ç—å"\n\n'
    #                  f"‚îú–§–ò–û\n"
    #                  f'‚îú–ü—Ä–∏–º–µ—Ä–Ω—ã–π –ø—Ä–æ–±–µ–≥\n'
    #                  f'‚îú–ú–∞—Ä–∫–∞ —à–∏–Ω\n'
    #                  f'‚îú–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞\n'
    #                  f'<b>‚ùóÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–∫–æ–º –ø–æ—Ä—è–¥–∫–µ</b>',
    #             reply_markup=cencel_btn
    #         )
    #     else:
    #         await bot.answer_callback_query(c.id, '‚ùóÔ∏è –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', show_alert=True)


    elif cd == 'buy_texosmotr_no_db':
        product_info = db.getProductsInfo(rowid=5)
        user_info = db.getUserInfo(user_id)

        if int(user_info[1]) >= int(product_info[1]):
            db.updateDkData(user_id, item='price', value=product_info[1])
            db.updateUserInfo(user_id, 'now_product', product_info[0])
            db.updateUserInfo(user_id, 'now_price', product_info[1])

            await MyStates.dk_data.set()
            await bot.answer_callback_query(c.id)
            await bot.delete_message(user_id, c.message.message_id)
            await bot.send_message(
                chat_id=user_id,
                text=f'<b>–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ</b> "–û—Ç–º–µ–Ω–∏—Ç—å"\n\n'
                     f"‚îú–§–ò–û\n" 
                     f'‚îú–ü—Ä–∏–º–µ—Ä–Ω—ã–π –ø—Ä–æ–±–µ–≥\n'
                     f'‚îú–ú–∞—Ä–∫–∞ —à–∏–Ω\n'
                     f'‚îú–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞\n'
                     f'<b>‚ùóÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–∫–æ–º –ø–æ—Ä—è–¥–∫–µ</b>:\n'
                     f'<em>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á\n'
                     f'251000\n'
                     f'Continental\n'
                     f'–ë–ï–ù–ó–ò–ù</em>',
                reply_markup=cencel_btn
            )
        else:
            await bot.answer_callback_query(c.id, '‚ùóÔ∏è –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', show_alert=True)


    elif cd == 'buy_texosmotr_b':
        product_info = db.getProductsInfo(rowid=6)
        user_info = db.getUserInfo(user_id)

        if int(user_info[1]) >= int(product_info[1]):
            db.updateDkData(user_id, item='price', value=product_info[1])
            db.updateUserInfo(user_id, 'now_product', product_info[0])
            db.updateUserInfo(user_id, 'now_price', product_info[1])


            await MyStates.dk_data.set()
            await bot.answer_callback_query(c.id)
            await bot.delete_message(user_id, c.message.message_id)
            await bot.send_message(
                chat_id=user_id,
                text=f'<b>–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ</b> "–û—Ç–º–µ–Ω–∏—Ç—å"\n\n'
                     f"‚îú–§–ò–û\n" 
                     f'‚îú–ü—Ä–∏–º–µ—Ä–Ω—ã–π –ø—Ä–æ–±–µ–≥\n'
                     f'‚îú–ú–∞—Ä–∫–∞ —à–∏–Ω\n'
                     f'‚îú–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞\n'
                     f'<b>‚ùóÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–∫–æ–º –ø–æ—Ä—è–¥–∫–µ</b>:\n'
                     f'<em>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á\n'
                     f'251000\n'
                     f'Continental\n'
                     f'–ë–ï–ù–ó–ò–ù</em>',
                reply_markup=cencel_btn
            )
        else:
            await bot.answer_callback_query(c.id, '‚ùóÔ∏è –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', show_alert=True)


    elif cd == 'buy_texosmotr_c':
        product_info = db.getProductsInfo(rowid=7)
        user_info = db.getUserInfo(user_id)

        if int(user_info[1]) >= int(product_info[1]):
            db.updateDkData(user_id, item='price', value=product_info[1])
            db.updateUserInfo(user_id, 'now_product', product_info[0])
            db.updateUserInfo(user_id, 'now_price', product_info[1])

            await MyStates.dk_data.set()
            await bot.answer_callback_query(c.id)
            await bot.delete_message(user_id, c.message.message_id)
            await bot.send_message(
                chat_id=user_id,
                text=f'<b>–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ</b> "–û—Ç–º–µ–Ω–∏—Ç—å"\n\n'
                     f"‚îú–§–ò–û\n" 
                     f'‚îú–ü—Ä–∏–º–µ—Ä–Ω—ã–π –ø—Ä–æ–±–µ–≥\n'
                     f'‚îú–ú–∞—Ä–∫–∞ —à–∏–Ω\n'
                     f'‚îú–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞\n'
                     f'<b>‚ùóÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–∫–æ–º –ø–æ—Ä—è–¥–∫–µ</b>:\n'
                     f'<em>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á\n'
                     f'251000\n'
                     f'Continental\n'
                     f'–ë–ï–ù–ó–ò–ù</em>',
                reply_markup=cencel_btn
            )
        else:
            await bot.answer_callback_query(c.id, '‚ùóÔ∏è –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', show_alert=True)

# 3 category
    elif cd == 'medAuto':
        await bot.answer_callback_query(c.id)
        await bot.edit_message_text(
            chat_id=msg,
            message_id=c.message.message_id,
            text=f"üìÉ–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Å–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã 003-–í/—É. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏–µ/–∑–∞–º–µ–Ω—ã –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è. –ë–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ—Å–µ—â–µ–Ω–∏—è –ù–î/–ü–ù–î. –ó–∞ 15 –º–∏–Ω—É—Ç! –í–æ–∑–º–æ–∂–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ –°–î–≠–ö –ø–æ –ú–æ—Å–∫–≤–µ, –ú–û –∏ –≤ —Ä–µ–≥–∏–æ–Ω—ã!!!\n"
                 f"<b>–í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–¥–∞–∂–∞ –æ–ø—Ç–æ–º, —Ü–µ–Ω–∞ –¥–æ–≥–æ–≤–æ—Ä–Ω–∞—è!!!</b>\n\n"
                 f"<em>‚è≥–°—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ 24 —á–∞—Å–æ–≤</em>",
            reply_markup=med_auto_btn
        )


    elif cd == 'buy_med_auto':
        product_info = db.getProductsInfo(rowid=9)
        user_info = db.getUserInfo(user_id)
        med_auto_btn.inline_keyboard.clear()
        med_auto_btn.row(
            types.InlineKeyboardButton(f'–ö—É–ø–∏—Ç—å –ú–µ–¥ –°–ø—Ä–∞–≤–∫—É –Ω–∞ –ø—Ä–∞–≤–∞ | {db.getProductsInfo(rowid=9)[1]} RUB',
                                       callback_data='buy_med_auto'))
        med_auto_btn.add(back_btn)

        if int(user_info[1]) >= int(product_info[1]):
            db.updateMedAutoData(user_id, item='price', value=product_info[1])
            db.updateUserInfo(user_id, 'now_product', product_info[0])
            db.updateUserInfo(user_id, 'now_price', product_info[1])

            await MyStates.med_auto.set()
            await bot.answer_callback_query(c.id)
            await bot.delete_message(user_id, c.message.message_id)
            await bot.send_message(
                chat_id=user_id,
                text=f'<b>–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ</b> "–û—Ç–º–µ–Ω–∏—Ç—å"\n\n'
                     f"‚îú–§–ò–û\n"
                     f'‚îú–î–∞—Ç–∞ —Ä–æ–∂-–Ω–∏—è\n'
                     f'‚îú–°–µ—Ä–∏—è –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞\n'
                     f'‚îú–ö–µ–º –∫–æ–≥–¥–∞ –≤—ã–¥–∞–Ω\n'
                     f'‚îú–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–∞–≤ (B, C, D)\n'
                     f'<b>‚ùóÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–∫–æ–º –ø–æ—Ä—è–¥–∫–µ</b>',
                reply_markup=cencel_btn
            )
        else:
            await bot.answer_callback_query(c.id, '‚ùóÔ∏è –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', show_alert=True)

# 4 category
    elif cd == 'kaskoBank':
        await bot.answer_callback_query(c.id)
        kasko_bank_btn.inline_keyboard.clear()
        kasko_bank_btn.row(types.InlineKeyboardButton(f'–ö—É–ø–∏—Ç—å –ö–ê–°–ö–û {db.getProductsInfo(rowid=8)[1]} RUB',
                                                      callback_data='buy_kasko_bank'))
        kasko_bank_btn.add(back_btn)
        await bot.edit_message_text(
            chat_id=c.message.chat.id,
            message_id=c.message.message_id,
            text=f"üè¶–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–ª–∏—Å–∞.\n\n"
                 f"1)–§–ò–û, –¥–∞—Ç–∞ —Ä–æ–∂-–Ω–∏—è, —Å–µ—Ä–∏—è –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞, –∫–µ–º –∫–æ–≥–¥–∞ –≤—ã–¥–∞–Ω, –∞–¥—Ä–µ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –∫–æ–Ω—Ç.–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
                 f"2)–õ–∏—Ü–∞ –¥–æ–ø—É—â–µ–Ω–Ω—ã–µ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é( –µ—Å–ª–∏ –Ω–µ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á.)–§–ò–û, –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è, –í–£, —Å—Ç–∞–∂ –≤–æ–∂–¥–µ–Ω–∏—è. \n"
                 f"3)–ü–æ –¢–°: –º–∞—Ä–∫–∞, –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞, Vin, –ø—Ç—Å, –≥–æ—Å –Ω–æ–º–µ—Ä, –ª.—Å, —Ä–º–º.\n"
                 f"4)–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞.\n"
                 f"5)–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è.\n\n"
                 f"<em>–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏ –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∫–∞ (—Å–¥–µ–∫)</em>\n\n"
                 f"<em>‚è≥–°—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –æ—Ç 1 –¥–æ 3—Ö —Å—É—Ç–æ–∫</em>",
            reply_markup=kasko_bank_btn
        )


    elif cd == 'buy_kasko_bank':
        product_info = db.getProductsInfo(rowid=8)
        user_info = db.getUserInfo(user_id)

        if int(user_info[1]) >= int(product_info[1]):
            db.updateKaskoBankData(user_id, item='price', value=product_info[1])
            db.updateUserInfo(user_id, 'now_product', product_info[0])
            db.updateUserInfo(user_id, 'now_price', product_info[1])

            await MyStates.kasko_bank.set()
            await bot.answer_callback_query(c.id)
            await bot.delete_message(user_id, c.message.message_id)
            await bot.send_message(
                chat_id=user_id,
                text=f'<b>–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ</b> "–û—Ç–º–µ–Ω–∏—Ç—å"\n\n'
                     f"‚îú–§–ò–û\n"
                     f"‚îú–î–ê–¢–ê –†–û–ñ–î–ï–ù–ò–Ø\n"
                     f"‚îú–í–£\n"
                     f"‚îú–°–¢–ê–ñ –í–û–ñ–î–ï–ù–ò–ï\n"
                     f"‚îú–¢–° –î–ê–ù–ù–´–ï\n"
                     f'‚îú–ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï –ë–ê–ù–ö–ê\n'
                     f'‚îú–î–ï–ô–°–¢–í–ò–¢–ï–õ–¨–ù–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨ –ê–í–¢–û–ú–û–ë–ò–õ–Ø\n'
                     f'‚îú–¢–ï–õ–ï–§–û–ù –ù–û–ú–ï–†\n\n'
                     f'<b>‚ùóÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–∫–æ–º –ø–æ—Ä—è–¥–∫–µ</b>:\n'
                     f'<em>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á\n'
                     f'10.02.1999\n'
                     f'123123 2131\n'
                     f'3 –ª–µ—Ç\n'
                     f'71 MT 122911\n'
                     f'—Ç–∏–Ω—å–∫–æ—Ñ—Ñ\n'
                     f'5000000 —Ä—É–±\n'
                     f'+79633693636</em>',
                reply_markup=cencel_btn
            )
        else:
            await bot.answer_callback_query(c.id, '‚ùóÔ∏è –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', show_alert=True)

# 5 category
    elif cd == 'kartaGibdd':
        karta_gibdd_btn.inline_keyboard.clear()
        karta_gibdd_btn.row(
            types.InlineKeyboardButton(f'–ö—É–ø–∏—Ç—å –ö–∞—Ä—Ç–∞ —É—á–µ—Ç–∞ –ì–ò–ë–î–î {db.getProductsInfo(rowid=10)[1]} RUB',
                                       callback_data='buy_karta_gibdd'))
        karta_gibdd_btn.add(back_btn)
        await bot.edit_message_text(
            chat_id=c.message.chat.id,
            message_id=c.message.message_id,
            text=f"<b>–ö–∞—Ä—Ç–∞ —É—á—ë—Ç–∞ –≥–æ—Å –Ω–æ–º–µ—Ä–∞</b>",
            reply_markup=karta_gibdd_btn
        )


    elif cd == 'buy_karta_gibdd':
        product_info = db.getProductsInfo(rowid=10)
        user_info = db.getUserInfo(user_id)
        karta_vu_gai_btn.inline_keyboard.clear()
        karta_vu_gai_btn.row(types.InlineKeyboardButton(f'–ö—É–ø–∏—Ç—å –í–£ –ø–æ –±–∞–∑–µ –ì–ê–ò {db.getProductsInfo(rowid=11)[1]} RUB',
                                                        callback_data='buy_karta_vu_gai'))
        karta_vu_gai_btn.add(back_btn)

        if int(user_info[1]) >= int(product_info[1]):
            db.updateKartaGibddData(user_id, item='price', value=product_info[1])
            db.updateUserInfo(user_id, 'now_product', product_info[0])
            db.updateUserInfo(user_id, 'now_price', product_info[1])

            await MyStates.karta_gibdd.set()
            await bot.answer_callback_query(c.id)
            await bot.delete_message(user_id, c.message.message_id)
            await bot.send_message(
                chat_id=user_id,
                text=f'<b>–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ</b> "–û—Ç–º–µ–Ω–∏—Ç—å"\n\n'
                     f"‚îú–í–≤–µ–¥–∏—Ç–µ –ì–æ—Å.–ù–æ–º–µ—Ä\n",
                reply_markup=cencel_btn
            )
        else:
            await bot.answer_callback_query(c.id, '‚ùóÔ∏è –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', show_alert=True)

# 6 category
    elif cd == 'kartaVUgai':
        await bot.edit_message_text(
            chat_id=c.message.chat.id,
            message_id=c.message.message_id,
            text=f"<b>–ö–∞—Ä—Ç–∞ –≤—É —Ñ–æ—Ç–æ –ø—Ä–∞–≤</b>",
            reply_markup=karta_vu_gai_btn
        )


    elif cd == 'buy_karta_vu_gai':
        product_info = db.getProductsInfo(rowid=11)
        user_info = db.getUserInfo(user_id)

        if int(user_info[1]) >= int(product_info[1]):
            db.updateKartaVUGaiData(user_id, item='price', value=product_info[1])
            db.updateUserInfo(user_id, 'now_product', product_info[0])
            db.updateUserInfo(user_id, 'now_price', product_info[1])

            await MyStates.karta_vu_gai.set()
            await bot.answer_callback_query(c.id)
            await bot.delete_message(user_id, c.message.message_id)
            await bot.send_message(
                chat_id=user_id,
                text=f'<b>–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ</b> "–û—Ç–º–µ–Ω–∏—Ç—å"\n\n'
                     f"‚îú–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –ø—Ä–∞–≤–∞\n",
                reply_markup=cencel_btn
            )
        else:
            await bot.answer_callback_query(c.id, '‚ùóÔ∏è –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', show_alert=True)

# 7 category
    elif cd == 'poiskSolariy':
        poisk_solariy_btn.inline_keyboard.clear()
        poisk_solariy_btn.row(
            types.InlineKeyboardButton(f'–ö—É–ø–∏—Ç—å –ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –°–æ–ª—è—Ä–∏—Å {db.getProductsInfo(rowid=12)[1]} RUB',
                                       callback_data='buy_poisk_solariy'))
        poisk_solariy_btn.add(back_btn)
        await bot.edit_message_text(
            chat_id=c.message.chat.id,
            message_id=c.message.message_id,
            text=f"<b>–°–æ–ª—è—Ä–∏—Å –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –§–ò–û, –ì–û–î –†–û–ñ–î–ï–ù–ò–Ø</b>",
            reply_markup=poisk_solariy_btn
        )


    elif cd == 'buy_poisk_solariy':
        product_info = db.getProductsInfo(rowid=12)
        user_info = db.getUserInfo(user_id)

        if int(user_info[1]) >= int(product_info[1]):
            db.updatePoiskSolariyData(user_id, item='price', value=product_info[1])
            db.updateUserInfo(user_id, 'now_product', product_info[0])
            db.updateUserInfo(user_id, 'now_price', product_info[1])

            await MyStates.poisk_solariy.set()
            await bot.answer_callback_query(c.id)
            await bot.delete_message(user_id, c.message.message_id)
            await bot.send_message(
                chat_id=user_id,
                text=f'<b>–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ</b> "–û—Ç–º–µ–Ω–∏—Ç—å"\n\n'
                     f"‚îú–§–ò–û\n"
                     f"‚îú–î–ê–¢–ê –†–û–ñ–î–ï–ù–ò–Ø\n\n"
                     f'<b>‚ùóÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–∫–æ–º –ø–æ—Ä—è–¥–∫–µ</b>'
                     f'<em>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á\n'
                     f'10.02.1999</em>',
                reply_markup=cencel_btn
            )
        else:
            await bot.answer_callback_query(c.id, '‚ùóÔ∏è –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', show_alert=True)

# admin panel
    elif cd == 'change_prices':
        await bot.answer_callback_query(c.id)
        await bot.edit_message_text(
            chat_id=user_id,
            message_id=c.message.message_id,
            text=f"<b>C–ø–∏—Å–æ–∫ —É—Å–ª—É–≥:</b>",
            reply_markup=change_service_products_btn
        )


    elif cd == 'change_qiwi_configs':
        if user_id in bot_admins:
            await MyStates.update_qiwi_data.set()
            await bot.send_message(user_id, f"<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∏ —Ç–æ–∫–µ–Ω –æ—Ç QIWI.</b>\n\n"
                                            f"<em>–ü—Ä–∏–º–µ—Ä:</em>\n"
                                            f"79632587456\n"
                                            f"eyJ2ZXJzaW9uIjoiUDJQIiwiZGF0YSI6eyJwYXlpbl9tZXJjaGFudF..........")
        else:
            await bot.answer_callback_query(c.id, f"–≠—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ì–ª.–ê–¥–º–∏–Ω–∞–º!")


    elif cd == 'sending_all':
        await bot.answer_callback_query(c.id)
        await MyStates.sending_to_users.set()
        await bot.send_message(user_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=cencel_btn)


    elif cd == 'all_admins':
        db_admins = db.getAdminsId()
        text = "<b>–í—Å–µ –∞–¥–º–∏–Ω—ã:</b>\n\n"
        for adm in db_admins:
            text += f"<a href='tg://user?id={adm[0]}'>Admin</a> - <code>{adm[0]}</code>\n"

        await bot.answer_callback_query(c.id)
        await bot.send_message(user_id, text)


    elif cd.split("_")[0] == 'change':
        await MyStates.update_product_price.set()
        product_row.append(int(cd.split("_")[1]))
        await bot.answer_callback_query(c.id)
        await bot.edit_message_text(
            chat_id=user_id,
            message_id=c.message.message_id,
            text="<b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:</b>"
        )



@dp.message_handler(commands=['start', 'menu', 'cancel'])
async def welcome(message: Message):
    user_id = message.from_user.id
    msg = message.chat.id

    bot_commands = [
        BotCommand(command="/start", description='–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞'),
        BotCommand(command="/menu", description='–ì–ª–∞–≤–Ω—ã–π –º–µ–Ω—é –±–æ—Ç–∞'),
        BotCommand(command="/cancel", description='–û—Ç–º–µ–Ω–∏—Ç—å/–ù–∞–∑–∞–¥')
    ]
    await bot.set_my_commands(bot_commands)


    if db.checkUser(user_id) is None:
        await bot.send_message(user_id, f"<b>–û—Ç–∫—É–¥–∞ –≤—ã —É–∑–Ω–∞–ª–∏ –ø—Ä–æ –Ω–∞—Å?</b>", reply_markup=user_from_btn)

    else:
        video_id = "BAACAgIAAxkBAAJJN2IznZqg5u_B-1xUkbTEGK0zHXpdAALeGAACmoWgScyGfFS0EYncIwQ"
        await bot.send_video(user_id, video_id, caption=f"<b>üôã‚Äç‚ôÄÔ∏è–ü—Ä–∏–≤–µ—Ç –¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥!</b>\n"
                                      f"<b>–ú–µ–Ω—è –∑–æ–≤—É—Ç –û—Å–∞–≥–æ –ú–∞–∫—Å</b>\n\n"
                                      f"–Ø –±—ã–ª —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –æ—Å–∞–≥–æ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç—ã  –Ω–∞ —Ç–≤–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å.\n\n"
                                      f"<em>–û–±–µ—â–∞—é –Ω–µ –∑–∞–Ω–∏–º–∞—Ç—å —É —Ç–µ–±—è –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, <b>–≤—Ä–µ–º—è</b> = <b>–¥–µ–Ω—å–≥–∏</b>, –ø–æ—ç—Ç–æ–º—É –≤—Å–µ –±—É–¥–µ—Ç –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ, –±—ã—Å—Ç—Ä–æ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–Ω—è—Ç–Ω–æ.</em>\n\n"
                                      f"‚è≥–ó–∞–∫–∞–∑—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è: <b>—Å 09:00 –¥–æ 22:00 –ø–æ –ú–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏, –∞ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è 24/7</b>\n\n"
                                      f"–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é –∏ —è —Å —Ä–∞–¥–æ—Å—Ç—å—é —Ç–µ–±–µ –ø–æ–º–æ–≥—Éüòå", reply_markup=menu)



@dp.message_handler(commands=['admin'])
async def adminPanel(message: Message):
    user_id = message.from_user.id
    db_admins = db.getAdminsId()
    qiwi_data = db.getQiwiConfig()
    all_admins = []
    if not db_admins is None:
        for adm in bot_admins:
            all_admins.append(adm)
        for adm in db_admins:
            all_admins.append(adm[0])
    else:
        for adm in bot_admins:
            all_admins.append(adm)

    if user_id in all_admins:
        from_data = db.getFromUsersData()
        text = f"<b>üë§ –ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å:</b>\n\n" \
               f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b> <em>{db.getBotUsers()[0]}</em> —á–µ–ª–æ–≤–µ–∫\n" \
               f"<b>Qiwi –ù–æ–º–µ—Ä:</b> <code>{qiwi_data[0]}</code>\n" \
               f"<b>Qiwi –¢–æ–∫–µ–Ω:</b> <code>{qiwi_data[1]}</code>\n\n" \
               f"<b>Yandex:</b> <em>{from_data[0]} —á–µ–ª.</em>\n" \
               f"<b>Google:</b> <em>{from_data[1]} —á–µ–ª.</em>\n" \
               f"<b>Telegram:</b> <em>{from_data[2]} —á–µ–ª.</em>\n" \
               f"<b>WhatsApp:</b> <em>{from_data[3]} —á–µ–ª.</em>\n" \
               f"<b>Vkontakte:</b> <em>{from_data[4]} —á–µ–ª.</em>\n" \
               f"<b>–û—Ç –¥—Ä—É–≥–∞:</b> <em>{from_data[5]} —á–µ–ª.</em>\n"

        await bot.send_message(user_id, text, reply_markup=admin_panel_btn)


@dp.message_handler(commands=['setadmin'])
async def setAdminInBot(message: Message):
    user_id = message.from_user.id
    text = message.text.split(' ')[1]
    db_admins = db.getAdminsId()
    all_admins = []
    if not db_admins is None:
        for adm in bot_admins:
            all_admins.append(adm)
        for adm in db_admins:
            all_admins.append(adm[0])
    else:
        for adm in bot_admins:
            all_admins.append(adm)

    if user_id in all_admins:
        db.setNewAdmin(int(text))
        await bot.send_message(user_id, f"‚úÖ –ê–¥–º–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")



@dp.message_handler(commands=['deladmin'])
async def delAdminInBot(message: Message):
    user_id = message.from_user.id
    text = message.text.split(' ')[1]
    db_admins = db.getAdminsId()
    all_admins = []
    if not db_admins is None:
        for adm in bot_admins:
            all_admins.append(adm)
        for adm in db_admins:
            all_admins.append(adm[0])
    else:
        for adm in bot_admins:
            all_admins.append(adm)

    if user_id in all_admins:
        db.delNewAdmin(text)
        await bot.send_message(user_id, f"‚úÖ –ê–¥–º–∏–Ω —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")





@dp.message_handler(commands=['info'])
async def getUserInfoHandler(message: Message):
    user_id = message.from_user.id
    text = message.text.split(' ')[1]
    user_info = db.getUserInfo(text)
    db_admins = db.getAdminsId()
    all_admins = []
    if not db_admins is None:
        for adm in bot_admins:
            all_admins.append(adm)
        for adm in db_admins:
            all_admins.append(adm[0])
    else:
        for adm in bot_admins:
            all_admins.append(adm)

    if user_id in all_admins:
        await bot.send_message(user_id, f"ID: {user_info[0]}\n"
                                    f"–ë–∞–ª–∞–Ω—Å: {user_info[1]}\n"
                                    f"–ü–æ—Å–ª–µ–¥–Ω—è—è –¥–µ–ø–æ–∑–∏—Ç–Ω–∞—è —Å—É–º–º–∞: {user_info[3]}\n"
                                    f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç: {user_info[4]}\n"
                                    f"–¶–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞: {user_info[5]}")



@dp.message_handler(commands=['money'])
async def setMoneyAdminHandler(message: Message):
    user_id = message.from_user.id
    text = message.text
    db_admins = db.getAdminsId()
    vals = text.split(" ")
    all_admins = []
    if not db_admins is None:
        for adm in bot_admins:
            all_admins.append(adm)
        for adm in db_admins:
            all_admins.append(adm[0])
    else:
        for adm in bot_admins:
            all_admins.append(adm)

    if user_id in all_admins:
        if len(vals) > 1:
            db.updateUserMoney(user_id=vals[1], money=vals[2])
            await message.reply("–í—ã–ø–æ–ª–Ω–µ–Ω–æ ‚úÖ")





@dp.message_handler(regexp='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å')
async def cenceledBtnFunc(message: Message):
    user_id = message.from_user.id
    await bot.delete_message(message.chat.id, message.message_id)
    await bot.delete_message(message.chat.id, message.message_id - 1)
    await bot.send_message(user_id, "–û—Ç–º–µ–Ω–µ–Ω–æ!", reply_markup=remove)
    await bot.send_message(user_id, f"<b>üôã‚Äç‚ôÄÔ∏è–ü—Ä–∏–≤–µ—Ç –¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥!</b>\n"
                                    f"<b>–ú–µ–Ω—è –∑–æ–≤—É—Ç –û—Å–∞–≥–æ –ú–∞–∫—Å</b>\n\n"
                                    f"–Ø –±—ã–ª —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –æ—Å–∞–≥–æ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç—ã  –Ω–∞ —Ç–≤–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å.\n\n"
                                    f"<em>–û–±–µ—â–∞—é –Ω–µ –∑–∞–Ω–∏–º–∞—Ç—å —É —Ç–µ–±—è –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, <b>–≤—Ä–µ–º—è</b> = <b>–¥–µ–Ω—å–≥–∏</b>, –ø–æ—ç—Ç–æ–º—É –≤—Å–µ –±—É–¥–µ—Ç –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ, –±—ã—Å—Ç—Ä–æ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–Ω—è—Ç–Ω–æ.</em>\n\n"
                                    f"‚è≥–ó–∞–∫–∞–∑—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è: <b>—Å 09:00 –¥–æ 22:00 –ø–æ –ú–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏, –∞ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è 24/7</b>\n\n"
                                    f"–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é –∏ —è —Å —Ä–∞–¥–æ—Å—Ç—å—é —Ç–µ–±–µ –ø–æ–º–æ–≥—Éüòå", reply_markup=menu)



@dp.message_handler(regexp='üìÇ –ù–∞—à–∏ —É—Å–ª—É–≥–∏')
async def serviceProductsHandler(message: Message):
    user_id = message.from_user.id
    buy_osago_btn.inline_keyboard.clear()
    back_btn = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")
    buy_osago_btn1 = types.InlineKeyboardButton(f"–ï-–æ—Å–∞–≥–æ –Ω–∞ 1 –ì–û–î | {db.getProductsInfo(rowid=1)[1]} RUB",
                                                callback_data="buy_osago_year")
    buy_osago_btn2 = types.InlineKeyboardButton(f"–ï-–æ—Å–∞–≥–æ –Ω–∞ 3 –ú–ï–° | {db.getProductsInfo(rowid=2)[1]} RUB",
                                                callback_data="buy_osago_month")
    buy_osago_btn3 = types.InlineKeyboardButton(f"–ï-–æ—Å–∞–≥–æ –ë–ï–ó –ë–ê–ó–´ | {db.getProductsInfo(rowid=3)[1]} RUB",
                                                callback_data="buy_osago_nodb")
    buy_osago_btn.add(buy_osago_btn1, buy_osago_btn2, buy_osago_btn3, back_btn)
    await bot.send_message(user_id, f"üåê –ù–∞—à–∏ —É—Å–ª—É–≥–∏", reply_markup=service_products_btn)


@dp.message_handler(regexp='üë§ –ü—Ä–æ—Ñ–∏–ª—å')
async def serviceProductsHandler(message: Message):
    user_id = message.from_user.id
    user_info = db.getUserInfo(user_id)
    text = f"üÜî ID: {user_id}\n" \
           f"üí∞ –ë–∞–ª–∞–Ω—Å: {user_info[1]} —Ä—É–±."
    await bot.send_message(user_id, f"üë§ –í–∞—à –ü—Ä–æ—Ñ–∏–ª—å\n\n{text}", reply_markup=user_profile_btn)


@dp.message_handler(regexp='‚òéÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å')
async def serviceProductsHandler(message: Message):
    user_id = message.from_user.id
    await bot.send_message(user_id, f"‚ú≥Ô∏è –ì–ª.–ê–¥–º–∏–Ω –±–æ—Ç–∞: @osagomakc")


@dp.message_handler(regexp='üí•–¢–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª')
async def serviceProductsHandler(message: Message):
    user_id = message.from_user.id
    await bot.send_message(user_id, f"‚ú≥Ô∏è –ù–∞—à –∫–∞–Ω–∞–ª: @osagomax")


# @dp.message_handler(regexp='üìë –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –±–æ—Ç—É')
# async def serviceProductsHandler(message: Message):
#     user_id = message.from_user.id
#     await bot.send_message(user_id, f"‚ú≥Ô∏è –ù–∞—à –∫–∞–Ω–∞–ª: @osagomax")


@dp.message_handler(content_types=['text', 'photo', 'document', 'video'])
async def sendinUserOrderFunc(message: Message):
    user_id = message.from_user.id
    text = message.caption
    db_admins = db.getAdminsId()
    all_admins = []
    if not db_admins is None:
        for adm in bot_admins:
            all_admins.append(adm)
        for adm in db_admins:
            all_admins.append(adm[0])
    else:
        for adm in bot_admins:
            all_admins.append(adm)

    try:
        if text.isdigit() and user_id in all_admins:
            if message.content_type == 'photo':
                await bot.send_photo(text, message.photo[-1].file_id, caption="‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")

            elif message.content_type == 'document':
                await bot.send_document(text, message.document.file_id, caption="‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")

            try:
                for sending in all_admins:
                    await bot.send_message(sending, f"‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! (<code>{text}</code>)")
                    await asyncio.sleep(0.03)
            except Exception as ex:
                print(ex)
    except Exception as e:
        pass
        # print(f'{type(e).__name__}: {e} | Line: {sys.exc_info()[-1].tb_lineno}')
    #     await bot.send_message(user_id, f"–Æ–∑–µ—Ä —Å —Ç–∞–∫–∏–º ({text}) ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")





@dp.message_handler(state=MyStates.depozit)
async def userDepozitFunc(message: Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text
    pay_btn.inline_keyboard.clear()

    if text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å':
        await bot.delete_message(message.chat.id, message.message_id - 1)
        await bot.send_message(user_id, "–û—Ç–º–µ–Ω–µ–Ω–æ!", reply_markup=menu)
        await state.finish()
    else:
        p2p = QiwiP2P(auth_key=db.getQiwiConfig()[1])
        bill = p2p.bill(amount=text, lifetime=30, comment=f"{user_id}")
        db.createPayment(user_id, bill.bill_id)

        pay_btn.row(types.InlineKeyboardButton("üí∏ –û–ø–ª–∞—Ç–∏—Ç—å", url=bill.pay_url))
        pay_btn.row(types.InlineKeyboardButton("‚ôªÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data='check_pay'))
        pay_btn.row(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="back"))

        if text.isdigit() and int(text) > 100:
            db.updateUserInfo(user_id, item='depozit', value=text)
            await bot.delete_message(user_id, message.message_id)
            await bot.delete_message(user_id, message.message_id - 1)
            await bot.send_message(user_id, f"‚úÖ –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —Å–æ–∑–¥–∞–Ω", reply_markup=remove)
            await bot.send_message(user_id, f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>üí∏ –û–ø–ª–∞—Ç–∏—Ç—å</b>", reply_markup=pay_btn)
            await state.finish()
        else:
            await bot.send_message(user_id, f"‚ùóÔ∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥")



@dp.message_handler(state=MyStates.osago_data)
async def osagoDataFunc(message: Message, state: FSMContext):
    user_id = message.from_user.id
    msg = message.chat.id
    text = message.text
    send_order_btn.inline_keyboard.clear()

    try:
        if text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å':
            await bot.send_message(user_id, "–û—Ç–º–µ–Ω–µ–Ω–æ!", reply_markup=menu)
            await state.finish()
        else:
            spliting = text.split('\n')
            pass_data = ''
            for item in spliting[6:]:
                pass_data += f"\n{item}"

            if len(spliting) >= 8:
                await bot.send_message(msg, '‚è≥', reply_markup=remove)
                await asyncio.sleep(3)
                await bot.delete_message(msg, message.message_id + 1)
                send_order_btn.row(types.InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"osago_data_send_to_admin"))
                send_order_btn.row(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"back"))


                await bot.send_message(
                    msg,
                    f"<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:</b>\n\n" 
                    f"<b>‚îú –§–ò–û –°–¢–†–ê–•–û–í–ê–¢–ï–õ–Ø:</b> <em>{spliting[0]}</em>\n" 
                    f"<b>‚îú –§–ò–û –°–û–ë–°–¢–í–ï–ù–ù–ò–ö–ê:</b> <em>{spliting[1]}</em>\n" 
                    f"<b>‚îú –ú–ê–†–ö–ê/–ú–û–î–ï–õ–¨ –ê–í–¢–û:</b> <em>{spliting[2]}</em>\n" 
                    f"<b>‚îú VIN –ù–û–ú–ï–†/–†–ê–ú–ê/–ö–£–ó–û–í:</b> <em>{spliting[3]}</em>\n" 
                    f"<b>‚îú –ù–û–ú–ï–† –ü–¢–°:</b> <em>{spliting[4]}</em>\n"
                    f"<b>‚îú –ù–û–ú–ï–† –ê–í–¢–û:</b> <em>{spliting[5]}</em>\n"
                    f"<b>‚îú –ü–ê–°–ü–û–†–¢ –î–ê–ù–ù–´–ï:</b> <em>{pass_data}</em>\n\n"
                    f'<em>–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã, –Ω–∞–∂–º–∏—Ç–µ "–û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑"</em>',
                    reply_markup=send_order_btn
                )

                for item, value in zip(osago_data_list, spliting[:6]):
                    db.updateOsagoData(user_id, item=item, value=value)
                db.updateOsagoData(user_id, item='pass_data', value=pass_data)
                db.updateUserInfo(user_id, 'product_name', 'osago_data')

                await state.finish()
            else:
                await bot.send_message(user_id, f"–ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –∏–ª–∏ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–π!")
    except Exception as ex:
        print(ex)
        await bot.send_message(user_id, f"–ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –∏–ª–∏ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–π!")



@dp.message_handler(state=MyStates.dk_data)
async def dkDataFunc(message: Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text

    try:
        if text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å':
            await bot.delete_message(message.chat.id, message.message_id - 1)
            await bot.send_message(user_id, "–û—Ç–º–µ–Ω–µ–Ω–æ!", reply_markup=menu)
            await state.finish()
        else:
            spliting = text.split('\n')
            if len(spliting) == 4:
                await MyStates.dk_photo_1.set()
                await bot.send_message(user_id, f"‚îú–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –°–¢–° –∏–ª–∏ –ü–¢–° —Å –¥–≤—É—Ö —Å—Ç–æ—Ä–æ–Ω\n<b>‚ùóÔ∏è(—Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ –æ–¥–Ω–æ–º—É)</b>")

                for item, value in zip(dk_data_list, spliting):
                    db.updateDkData(user_id, item=item, value=value)
                db.updateUserInfo(user_id, 'product_name', 'dk_data')
            else:
                await bot.send_message(user_id, f"–ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –∏–ª–∏ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–π!")


    except Exception as ex:
        print(ex)
        await bot.send_message(user_id, f"–ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –∏–ª–∏ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–π!")



@dp.message_handler(state=MyStates.dk_photo_1, content_types=['photo', 'document', 'text'])
async def dkDataPic1Func(message: Message, state: FSMContext):
    user_id = message.from_user.id

    try:
        if message.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å':
            await bot.delete_message(message.chat.id, message.message_id - 1)
            await bot.send_message(user_id, "–û—Ç–º–µ–Ω–µ–Ω–æ!", reply_markup=menu)
            await state.finish()
        else:
            if message.content_type in ['photo', 'document']:
                pic_id = message.photo[-1].file_id
                await MyStates.dk_photo_2.set()
                db.updateDkData(user_id, item='sts_or_pts_photo1', value=pic_id)
                await bot.send_message(user_id, f'–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ç–æ—Ä–æ–π —Ñ–æ—Ç–æ')
            else:
                await bot.send_message(user_id, f"–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ, –ø–æ–∂–∞–ª—É—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ!")

    except Exception as ex:
        print(ex)



@dp.message_handler(state=MyStates.dk_photo_2, content_types=['photo', 'document', 'text'])
async def dkDataPic1Func(message: Message, state: FSMContext):
    user_id = message.from_user.id

    try:
        if message.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å':
            await bot.delete_message(message.chat.id, message.message_id - 1)
            await bot.send_message(user_id, "–û—Ç–º–µ–Ω–µ–Ω–æ!", reply_markup=menu)
            await state.finish()
        else:
            if message.content_type in ['photo', 'document']:
                pic_id = message.photo[-1].file_id
                await MyStates.dk_photo_3.set()
                db.updateDkData(user_id, item='sts_or_pts_photo2', value=pic_id)
                await bot.send_message(user_id, f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –º–∞—à–∏–Ω—ã —Å–ø–µ—Ä–µ–¥–∏ –∏ —Å–∑–∞–¥–∏. <em>–õ—É—á—à–µ –≤—Å–µ–≥–æ –¥–µ–ª–∞—Ç—å –Ω–∞ –∫—Ä—ã—Ç–æ–π –ø–∞—Ä–∫–æ–≤–∫–µ, –±–æ–∫—Å–µ, –≥–∞—Ä–∞–∂–µ, –ø–æ–¥ –Ω–∞–≤–µ—Å–æ–º, –∏–ª–∏ –≤–æ–∑–ª–µ –∫–∞–∫–æ–π –Ω–∏–±—É–¥—å —Å—Ç–µ–Ω—ã. –ù–∞ —Ñ–æ–Ω–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç—Ä–∞–≤—ã, –¥–µ—Ä–µ–≤—å–µ–≤, –Ω–µ–±–∞, —Å–æ–ª–Ω—Ü–∞.</em>\n\n'
                                                f'<b>‚ùóÔ∏è(—Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ –æ–¥–Ω–æ–º—É)</b>')
            else:
                await bot.send_message(user_id, f"–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ, –ø–æ–∂–∞–ª—É—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ!")

    except Exception as ex:
        print(ex)



@dp.message_handler(state=MyStates.dk_photo_3, content_types=['photo', 'document', 'text'])
async def dkDataPic1Func(message: Message, state: FSMContext):
    user_id = message.from_user.id

    try:
        if message.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å':
            await bot.delete_message(message.chat.id, message.message_id - 1)
            await bot.send_message(user_id, "–û—Ç–º–µ–Ω–µ–Ω–æ!", reply_markup=menu)
            await state.finish()
        else:
            if message.content_type in ['photo', 'document']:
                pic_id = message.photo[-1].file_id
                await MyStates.dk_photo_4.set()
                db.updateDkData(user_id, item='photo1', value=pic_id)
                await bot.send_message(user_id, f'–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ç–æ—Ä–æ–π —Ñ–æ—Ç–æ')
            else:
                await bot.send_message(user_id, f"–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ, –ø–æ–∂–∞–ª—É—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ!")

    except Exception as ex:
        print(ex)



@dp.message_handler(state=MyStates.dk_photo_4, content_types=['photo', 'document', 'text'])
async def dkDataPic1Func(message: Message, state: FSMContext):
    user_id = message.from_user.id
    send_order_btn.inline_keyboard.clear()

    if message.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å':
        await bot.send_message(user_id, "–û—Ç–º–µ–Ω–µ–Ω–æ!", reply_markup=menu)
        await state.finish()
    else:
        send_order_btn.row(types.InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"dk_data_send_to_admin"))
        send_order_btn.row(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"back"))

        if message.content_type in ['photo', 'document']:
            pic_id = message.photo[-1].file_id
            await bot.send_message(user_id, '‚è≥', reply_markup=remove)
            await asyncio.sleep(2)
            await bot.delete_message(user_id, message.message_id + 1)
            try:
                pics = db.getDkData(user_id)
                text = f"‚îú<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:</b>\n\n" \
                       f"‚îú<b>–§–ò–û:</b> <em>{pics[1]}</em>\n" \
                       f'‚îú–ü—Ä–∏–º–µ—Ä–Ω—ã–π –ø—Ä–æ–±–µ–≥: <em>{pics[2]}</em>\n' \
                       f'‚îú–ú–∞—Ä–∫–∞ —à–∏–Ω: <em>{pics[3]}</em>\n' \
                       f'‚îú–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞: <em>{pics[4]}</em>'

                db.updateDkData(user_id, item='photo2', value=pic_id)
                media_group = [InputMediaPhoto(pics[5], caption=text, parse_mode='html'), InputMediaPhoto(pics[6]), InputMediaPhoto(pics[7]), InputMediaPhoto(pics[8])]
                await bot.send_media_group(user_id, media_group)
                await bot.send_message(user_id, f'<em>–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã, –Ω–∞–∂–º–∏—Ç–µ "–û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑"</em>', reply_markup=send_order_btn)

                await state.finish()

            except Exception as ex:
                print(ex)

        else:
            await bot.send_message(user_id, f"–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ, –ø–æ–∂–∞–ª—É—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ!")





@dp.message_handler(state=MyStates.med_auto)
async def medAutoDataFunc(message: Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text
    send_order_btn.inline_keyboard.clear()

    try:
        if message.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å':
            await bot.send_message(user_id, "–û—Ç–º–µ–Ω–µ–Ω–æ!", reply_markup=menu)
            await state.finish()
        else:
            spliting = text.split('\n')
            if len(spliting) == 5:
                await bot.send_message(user_id, '‚è≥', reply_markup=remove)
                await asyncio.sleep(3)
                await bot.delete_message(user_id, message.message_id + 1)

                send_order_btn.row(types.InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"med_auto_send_to_admin"))
                send_order_btn.row(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"back"))

                await bot.send_message(
                    chat_id=user_id,
                    text=f"‚îú<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:</b>\n\n" \
                         f"<b>‚îú–§–ò–û:</b> {spliting[0]}\n"
                         f'<b>‚îú–î–∞—Ç–∞ —Ä–æ–∂-–Ω–∏—è:</b> {spliting[1]}\n'
                         f'<b>‚îú–°–µ—Ä–∏—è –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞:</b> {spliting[2]}\n'
                         f'<b>‚îú–ö–µ–º –∫–æ–≥–¥–∞ –≤—ã–¥–∞–Ω:</b> {spliting[3]}\n'
                         f'<b>‚îú–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–∞–≤ (B, C, D):</b> {spliting[4]}\n\n'
                         f'<em>–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã, –Ω–∞–∂–º–∏—Ç–µ "–û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑"</em>',
                    reply_markup=send_order_btn
                )

                for item, value in zip(med_auto_data_list, spliting):
                    db.updateMedAutoData(user_id, item=item, value=value)
                db.updateUserInfo(user_id, 'product_name', 'auto_med_data')

                await state.finish()

            else:
                await bot.send_message(user_id, f"–ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –∏–ª–∏ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–π!", message.message_id)
    except Exception as ex:
        print(ex)



@dp.message_handler(state=MyStates.kasko_bank)
async def kaskoBankDataFunc(message: Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text
    send_order_btn.inline_keyboard.clear()

    try:
        if message.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å':
            await bot.send_message(user_id, "–û—Ç–º–µ–Ω–µ–Ω–æ!", reply_markup=menu)
            await state.finish()
        else:
            spliting = text.split('\n')
            if len(spliting) == 8:
                await bot.send_message(user_id, '‚è≥', reply_markup=remove)
                await asyncio.sleep(3)
                await bot.delete_message(user_id, message.message_id + 1)

                send_order_btn.row(types.InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"kasko_bank_send_to_admin"))
                send_order_btn.row(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"back"))

                await bot.send_message(
                    chat_id=user_id,
                    text=f"‚îú<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:</b>\n\n" \
                         f"<b>‚îú–§–ò–û:</b> {spliting[0]}\n"
                         f"<b>‚îú–î–ê–¢–ê –†–û–ñ–î–ï–ù–ò–Ø:</b> {spliting[1]}\n"
                         f"<b>‚îú–í–£:</b> {spliting[2]}\n"
                         f"<b>‚îú–°–¢–ê–ñ –í–û–ñ–î–ï–ù–ò–ï:</b> {spliting[3]}\n"
                         f"<b>‚îú–¢–° –î–ê–ù–ù–´–ï:</b> {spliting[4]}\n"
                         f'<b>‚îú–ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï –ë–ê–ù–ö–ê:</b> {spliting[5]}\n'
                         f'<b>‚îú–î–ï–ô–°–¢–í–ò–¢–ï–õ–¨–ù–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨ –ê–í–¢–û–ú–û–ë–ò–õ–Ø:</b> {spliting[6]}\n'
                         f'<b>‚îú–¢–ï–õ–ï–§–û–ù –ù–û–ú–ï–†:</b> {spliting[7]}\n\n'
                         f'<em>–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã, –Ω–∞–∂–º–∏—Ç–µ "–û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑"</em>',
                    reply_markup=send_order_btn
                )

                for item, value in zip(kasko_bank_data_list, spliting):
                    db.updateKaskoBankData(user_id, item=item, value=value)
                db.updateUserInfo(user_id, 'product_name', 'kasko_bank_data')

                await state.finish()

            else:
                await bot.send_message(user_id, f"–ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –∏–ª–∏ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–π!")

    except Exception as ex:
        print(ex)



@dp.message_handler(state=MyStates.karta_gibdd)
async def kartaGibddDataFunc(message: Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text
    send_order_btn.inline_keyboard.clear()

    try:
        if message.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å':
            await bot.send_message(user_id, "–û—Ç–º–µ–Ω–µ–Ω–æ!", reply_markup=menu)
            await state.finish()
        else:
            await bot.send_message(user_id, '‚è≥', reply_markup=remove)
            await asyncio.sleep(3)
            await bot.delete_message(user_id, message.message_id + 1)

            send_order_btn.row(types.InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"karta_gibdd_send_to_admin"))
            send_order_btn.row(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"back"))

            await bot.send_message(
                chat_id=user_id,
                text=f"‚îú<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:</b>\n\n" \
                     f"<b>‚îú–ì–æ—Å.–ù–æ–º–µ—Ä:</b> {text}\n\n"
                     f'<em>–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã, –Ω–∞–∂–º–∏—Ç–µ "–û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑"</em>',
                reply_markup=send_order_btn
            )

            db.updateKartaGibddData(user_id, item='gos_nomer', value=text)
            db.updateUserInfo(user_id, 'product_name', 'karta_gibdd_data')

            await state.finish()

    except Exception as ex:
        print(ex)



@dp.message_handler(state=MyStates.karta_vu_gai, content_types=['photo', 'document', 'text'])
async def kartaVUGaiDataFunc(message: Message, state: FSMContext):
    user_id = message.from_user.id
    send_order_btn.inline_keyboard.clear()

    if message.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å':
        await bot.send_message(user_id, "–û—Ç–º–µ–Ω–µ–Ω–æ!", reply_markup=menu)
        await state.finish()
    else:
        send_order_btn.row(types.InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"karta_vu_gai_send_to_admin"))
        send_order_btn.row(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"back"))

        if message.content_type in ['photo', 'document']:
            pic_id = message.photo[-1].file_id
            await bot.send_message(user_id, '‚è≥', reply_markup=remove)
            await asyncio.sleep(2)
            await bot.delete_message(user_id, message.message_id + 1)
            try:


                db.updateKartaVUGaiData(user_id, item='prava_photo', value=pic_id)
                await bot.send_photo(user_id, pic_id, caption=f'<em>–ù–∞–∂–º–∏—Ç–µ "–û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑"</em>', reply_markup=send_order_btn)
                db.updateUserInfo(user_id, 'product_name', 'karta_gai_data')

                await state.finish()


            except Exception as ex:
                print(ex)

        else:
            await bot.send_message(user_id, f"–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ, –ø–æ–∂–∞–ª—É—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ!")


@dp.message_handler(state=MyStates.poisk_solariy)
async def posikSolariyDataFunc(message: Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text
    send_order_btn.inline_keyboard.clear()

    try:
        if message.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å':
            await bot.send_message(user_id, "–û—Ç–º–µ–Ω–µ–Ω–æ!", reply_markup=menu)
            await state.finish()
        else:
            spliting = text.split('\n')
            if len(spliting) == 2:
                await bot.send_message(user_id, '‚è≥', reply_markup=remove)
                await asyncio.sleep(3)
                await bot.delete_message(user_id, message.message_id + 1)

                send_order_btn.row(types.InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"poisk_solariy_send_to_admin"))
                send_order_btn.row(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"back"))

                await bot.send_message(
                    chat_id=user_id,
                    text=f"‚îú<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:</b>\n\n" \
                         f"<b>‚îú–§–ò–û:</b> {spliting[0]}\n"
                         f"<b>‚îú–î–ê–¢–ê –†–û–ñ–î–ï–ù–ò–Ø:</b> {spliting[1]}\n\n"
                         f'<em>–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã, –Ω–∞–∂–º–∏—Ç–µ "–û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑"</em>',
                    reply_markup=send_order_btn
                )

                db.updatePoiskSolariyData(user_id, item='fio', value=spliting[0])
                db.updatePoiskSolariyData(user_id, item='birthday', value=spliting[1])
                db.updateUserInfo(user_id, 'product_name', 'search_solary_data')

                await state.finish()

            else:
                await bot.send_message(user_id, f"–ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –∏–ª–∏ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–π!", message.message_id)

    except Exception as ex:
        print(ex)





@dp.message_handler(state=MyStates.sending_to_users, content_types=['text', 'photo', 'document', 'video', 'animation'])
async def sendingToUsersFunc(message: Message, state: FSMContext):
    users = db.getUsers()
    user_id = message.from_user.id
    text_type = message.content_type
    text = message.text
    text_caption = message.caption
    rep_btn = message.reply_markup
    sends = 0
    sends_error = 0

    if message.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å':
        await bot.delete_message(message.chat.id, message.message_id - 1)
        await bot.send_message(user_id, "–û—Ç–º–µ–Ω–µ–Ω–æ!", reply_markup=remove)
        await state.finish()
    else:
        await bot.send_message(user_id, "–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞—á–∏–ª—Å—è....", reply_markup=remove)
        await state.finish()

        start_time = datetime.datetime.now()
        for u in users:
            try:
                if text_type == 'text':
                    await bot.send_message(u[0], text, reply_markup=rep_btn)
                    sends += 1
                    await asyncio.sleep(0.03)

                elif text_type == "photo":
                    await bot.send_photo(u[0], message.photo[-1].file_id, caption=text_caption,
                                         reply_markup=rep_btn)
                    sends += 1
                    await asyncio.sleep(0.03)

                elif text_type == "video":
                    await bot.send_video(u[0], message.video.file_id, caption=text_caption, reply_markup=rep_btn)
                    sends += 1
                    await asyncio.sleep(0.03)

                elif text_type == "document":
                    await bot.send_document(u[0], message.document.file_id, caption=text_caption, reply_markup=rep_btn)
                    sends += 1
                    await asyncio.sleep(0.03)

                elif text_type == "animation":
                    await bot.send_animation(u[0], message.animation.file_id, caption=text_caption, reply_markup=rep_btn)
                    sends += 1
                    await asyncio.sleep(0.03)



            except Exception as ex:
                # print(f'{type(ex).__name__}: {ex} | Line: {sys.exc_info()[-1].tb_lineno} ****** {ex}')
                sends_error += 1
                continue

        if sends == 0:
            await bot.send_message(user_id, "‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ—à–ª–æ –Ω–∏–∫–æ–º—É")
        else:
            end_time = datetime.datetime.now()
            await bot.send_message(user_id,
                                   f"–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>{sends + sends_error}</b> —é–∑–µ—Ä–∞–º\n"
                                   f"–ê–∫—Ç–∏–≤–Ω—ã—Ö —é–∑–µ—Ä–æ–≤: <b>{sends}</b>\n"
                                   f"–ù–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —é–∑–µ—Ä–æ–≤: <b>{sends_error}</b>\n\n"
                                   f"–ù–∞—á–∞–ª–æ: {start_time.hour}:{start_time.minute}:{start_time.second}\n"
                                   f"–ö–æ–Ω–µ—Ü: {end_time.hour}:{end_time.minute}:{end_time.second}")




@dp.message_handler(state=MyStates.default_text_handler, content_types=['text', 'photo', 'document', 'video'])
async def defaultTextFunc(message: Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.caption
    db_admins = db.getAdminsId()
    qiwi_data = db.getQiwiConfig()
    all_admins = []
    if not db_admins is None:
        for adm in bot_admins:
            all_admins.append(adm)
        for adm in db_admins:
            all_admins.append(adm[0])
    else:
        for adm in bot_admins:
            all_admins.append(adm)

    try:
        if text.isdigit() and user_id in all_admins:
            if message.content_type == 'photo':
                await bot.send_photo(text, message.photo[-1].file_id, caption="‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")

            elif message.content_type == 'document':
                await bot.send_document(text, message.document.file_id, caption="‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")

            try:
                for sending in all_admins:
                    await bot.send_message(sending, f"‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! (<code>{text}</code>)")
                    await asyncio.sleep(0.03)
            except Exception as ex:
                print(ex)
    except Exception as e:
        print(f'{type(e).__name__}: {e} | Line: {sys.exc_info()[-1].tb_lineno}')
        # await bot.send_message(user_id, f"–Æ–∑–µ—Ä —Å —Ç–∞–∫–∏–º ({text}) ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    finally:
        await state.finish()


@dp.message_handler(state=MyStates.update_qiwi_data)
async def updateQiwiDataFunc(message: Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text.split('\n')

    if len(text) == 2:
        db.updateQiwiConfig('qiwi_number', text[0])
        db.updateQiwiConfig('qiwi_token', text[1])

        await bot.send_message(user_id, f"‚úÖ Qiwi –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")

    else:
        await bot.send_message(user_id, "‚ö†Ô∏è –í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")

    await state.finish()



@dp.message_handler(state=MyStates.update_product_price)
async def updateProductPriceFunc(message: Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text
    change_service_products_btn.inline_keyboard.clear()

    if text.isdigit():
        db.updateProductsInfo(rowid=product_row[0], sum=text)
        product_row.clear()
        await bot.delete_message(user_id, message.message_id)
        await bot.delete_message(user_id, message.message_id - 1)

        chsp1 = types.InlineKeyboardButton(f"–ï-–æ—Å–∞–≥–æ –Ω–∞ 1 –ì–û–î | {db.getProductsInfo(rowid=1)[1]} RUB",
                                           callback_data="change_1")
        chsp2 = types.InlineKeyboardButton(f"–ï-–æ—Å–∞–≥–æ –Ω–∞ 3 –ú–ï–° | {db.getProductsInfo(rowid=2)[1]} RUB",
                                           callback_data="change_2")
        chsp3 = types.InlineKeyboardButton(f"–ï-–æ—Å–∞–≥–æ –ë–ï–ó –ë–ê–ó–´ | {db.getProductsInfo(rowid=3)[1]} RUB",
                                           callback_data="change_3")
        chsp5 = types.InlineKeyboardButton(f"–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞ 1 –ì–û–î | {db.getProductsInfo(rowid=4)[1]} RUB",
                                           callback_data="change_4")
        chsp6 = types.InlineKeyboardButton(
            f"–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞ –±–µ–∑ –±–∞–∑—ã 1 –ì–û–î | {db.getProductsInfo(rowid=5)[1]} RUB", callback_data="change_5")
        chsp7 = types.InlineKeyboardButton(f"–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞ B | {db.getProductsInfo(rowid=6)[1]} RUB",
                                           callback_data="change_6")
        chsp8 = types.InlineKeyboardButton(f"–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞ C | {db.getProductsInfo(rowid=7)[1]} RUB",
                                           callback_data="change_7")
        chsp9 = types.InlineKeyboardButton(f'–ö—É–ø–∏—Ç—å –ú–µ–¥ –°–ø—Ä–∞–≤–∫—É –Ω–∞ –ø—Ä–∞–≤–∞ | {db.getProductsInfo(rowid=9)[1]} RUB',
                                           callback_data='change_8')
        chsp10 = types.InlineKeyboardButton(f'–ö—É–ø–∏—Ç—å –ö–ê–°–ö–û {db.getProductsInfo(rowid=8)[1]} RUB',
                                            callback_data='change_9')
        chsp11 = types.InlineKeyboardButton(f'–ö—É–ø–∏—Ç—å –ö–∞—Ä—Ç–∞ —É—á–µ—Ç–∞ –ì–ò–ë–î–î {db.getProductsInfo(rowid=10)[1]} RUB',
                                            callback_data='change_10')
        chsp12 = types.InlineKeyboardButton(f'–ö—É–ø–∏—Ç—å –í–£ –ø–æ –±–∞–∑–µ –ì–ê–ò {db.getProductsInfo(rowid=11)[1]} RUB',
                                            callback_data='change_11')
        chsp13 = types.InlineKeyboardButton(f'–ö—É–ø–∏—Ç—å –ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –°–æ–ª—è—Ä–∏—Å {db.getProductsInfo(rowid=12)[1]} RUB',
                                            callback_data='change_12')
        change_service_products_btn.add(chsp1, chsp2, chsp3, chsp5, chsp6, chsp7, chsp8, chsp9, chsp10, chsp11, chsp12,
                                        chsp13)
        change_service_products_btn.row(types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_admin_panel'))

        await bot.send_message(user_id, "‚úÖ –¶–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∞", reply_markup=change_service_products_btn)
    else:
        await bot.send_message(user_id, "‚ö†Ô∏è –í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")

    await state.finish()






if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)